#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2018 Lars Bergmann
#
# GNU GENERAL PUBLIC LICENSE
#    Version 3, 29 June 2007
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import json as jason
import threading
import subprocess
from pf_nxt.nxt_robo import ScoutRobo
from pf_nxt.nxt_server import NxtServer
from pf_nxt.nxt_websocket_server import initwebserver
import time
import asyncio
import websockets
import os


def getip():
    ip = subprocess.check_output("hostname -I", shell=True).decode('utf-8')
    ip = ip[:-2]  # eliminate unwanted characters
    return ip


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-i',
        '--ip',
        help='IP address of your server. Default is localhost',
        type=str,
        default=getip()
    )
    parser.add_argument(
        '-p',
        '--port',
        help='Port used by your server. Default is 9998',
        type=int,
        default=9998
    )

    parser.add_argument(
        '-b',
        '--baddr',
        help='Bluetooth address of the NXT robot',
        type=str,
        default='00:16:53:0D:14:AE'
    )
    parser.add_argument(
        '-s',
        '--secretpin',
        help='Pin to access NXT via bluetooth',
        type=str,
        default='1234'
    )

    parser.add_argument(
        '-m',
        '--method',
        help='Method to access NXT',
        type=str,
        default='bluetooth'
    )

    parser.add_argument(
        '-w',
        '--webmode',
        help='Enables control via Webserver. True = Websocket, False = Socket',
        default=False,
        action="store_true"
    )

    parser.add_argument(
        '-d',
        '--dryrun',
        help='Do not actually run robo, but do dryrun instead',
        default=False,
        action="store_true"
    )


    args = parser.parse_args()

    # Change baddr and pin for your robot
    robo = ScoutRobo(
        baddr=args.baddr,
        pin=args.secretpin,
        method=args.method,
        dryrun=args.dryrun
    )
    print('Robo initialized')
    print("ARGUMENTS:", str(args))
    if args.webmode is True:
        print(robo, type(robo))
        t = threading.Thread(
            name="t1",
            target=os.system,
            args=("cd pf_nxt/website && ls -la && pwd && ./run_flaskapp.sh",),
        )
        t.start()
        initwebserver(robo, args.ip, args.port)
        print('Websocket enabled')
    else:
        server = NxtServer(robo, ip=args.ip, port=args.port)
        print('Server initialized')
        server.run()
